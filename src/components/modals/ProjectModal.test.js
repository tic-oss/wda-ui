import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import ProjectModal from "./ProjectModal";
import '@testing-library/jest-dom'


// Generated by CodiumAI

describe('ProjectModal', () => {


    // packageName is empty
    it(' 01 should display modal with empty packageName,serverPort field', () => {
        // Arrange
        const nodeType = "UI";
        const serviceModal = true;
        const handleContainerClose = jest.fn();
        const applicationName = "Test Application";
        const clientFramework = "react";
        const applicationFramework = "";
        const packageName = "";
        const serverPort = "";
        const withExample = false;

        // Act
        render(<ProjectModal
            nodeType={nodeType}
            serviceModal={serviceModal}
            handleContainerClose={handleContainerClose}
            applicationName={applicationName}
            clientFramework={clientFramework}
            applicationFramework={applicationFramework}
            packageName={packageName}
            serverPort={serverPort}
            withExample={withExample}
        />);

        const packageNameInput = screen.getByTestId("packageName");
        const serverPortInput = screen.getByTestId("serverPort");
        expect(packageNameInput.value).toBe("");

        expect(serverPortInput.value).toBe("");
    });
    // Modal opens with correct header and fields
    it(' 02 should open modal with correct header and fields', () => {
        // Arrange
        const nodeType = "UI";
        const serviceModal = true;
        const handleContainerClose = jest.fn();
        const applicationName = "Test Application";
        const clientFramework = "react";
        const applicationFramework = "";
        const packageName = "";
        const serverPort = "";


        // Act
        render(<ProjectModal
            nodeType={nodeType}
            serviceModal={serviceModal}
            handleContainerClose={handleContainerClose}
            applicationName={applicationName}
            clientFramework={clientFramework}
            applicationFramework={applicationFramework}
            packageName={packageName}
            serverPort={serverPort}

        />);

        // Assert
        expect(screen.getByText("UI")).toBeInTheDocument();
        expect(screen.getByTestId("applicationName")).toBeInTheDocument();
        expect(screen.getByTestId("clientFramework")).toBeInTheDocument();
        expect(screen.getByTestId("packageName")).toBeInTheDocument();
        expect(screen.getByTestId("serverPort")).toBeInTheDocument();

    });

    // Modal closes when close button is clicked
    it('3 should close modal when close button is clicked', () => {
        // Arrange
        const nodeType = "UI";
        const serviceModal = true;
        const handleContainerClose = jest.fn();
        const applicationName = "Test Application";
        const clientFramework = "react";
        const applicationFramework = "";
        const packageName = "";
        const serverPort = "";
        const withExample = false;

        // Act
        render(<ProjectModal
            nodeType={nodeType}
            serviceModal={serviceModal}
            handleContainerClose={handleContainerClose}
            applicationName={applicationName}
            clientFramework={clientFramework}
            applicationFramework={applicationFramework}
            packageName={packageName}
            serverPort={serverPort}
            withExample={withExample}
        />);
        fireEvent.click(screen.getByLabelText("Close"));

        // Assert
        expect(handleContainerClose).toHaveBeenCalledTimes(1);
    });
    // Modal closes when close button is clicked

});
